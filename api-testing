// SERVER AND API AND DB CONNECTION

console.log("Starting the server...");

const express = require('express');
const cors = require('cors');
const app = express();
const db = require('./db');
const PORT = process.env.PORT || 9000;
app.use(cors());
app.use(express.json());

// استيراد نقاط التوجيه
const authRoutes = require('./routes/authRoutes');
const listsRoutes = require('./routes/listsRoutes');
const quizRoutes = require('./routes/quizRoutes');
const bookmarkRoutes = require('./routes/bookmarkRoutes');
const searchRoutes = require('./routes/searchRoutes');

// استخدام نقاط التوجيه
app.use('/api/auth', authRoutes);
app.use('/api/lists', listsRoutes);
app.use('/api/quizzes', quizRoutes);
app.use('/api/bookmarks', bookmarkRoutes);
app.use('/api/search', searchRoutes);

app.get('/', (req, res) => {
    res.send('Server is running successfully!');
});
// تشغيل السيرفر
app.listen(9000, () => {
    console.log('Server is running! Visit: http://localhost:9000');
  }); 

const mysql = require('mysql2');
const connection = mysql.createConnection({
  host: '127.0.0.1',
  user: 'root',
  password: 'Kokolp2025!',
  database: 'codequest1',
  port: 3306
});

connection.connect((err) => {
  if (err) {
    console.error('Database connection failed:', err);
    return;
  }
  console.log('Connected to MySQL database');
});

module.exports = connection;

// CRUD OPERATIONS 

// عملية انشاء لاضافة بيانات مستخدم جديد لقاعدة البيانات 
const express = require("express"); 
const bcrypt = require("bcrypt"); 
const db = require("../db"); // ملف اتصال قاعدة البيانات 
 
const router = express.Router(); 
 
// تسجيل مستخدم جديد
router.post("/register", async (req, res) => { 
    const { name, email, password } = req.body; 
 
    if (!name || !email || !password) { 
        return res.status(400).json({ message: "All fields are required." }); 
    } 
 
    const hashedPassword = await bcrypt.hash(password, 10);  
 
    const sql = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)"; 
    db.query(sql, [name, email, hashedPassword], (err, result) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(201).json({ message: "User registered successfully!" }); 
    }); 
}); 
 
// عملية قراءة لاسترجاع بيانات المستخدم من قاعدة البيانات 
router.post("/login", async (req, res) => { 
    const { email, password } = req.body; 
 
    if (!email || !password) { 
        return res.status(400).json({ message: "All fields are required." }); 
    } 
 
    const sql = "SELECT * FROM users WHERE email = ?"; 
    db.query(sql, [email], async (err, results) => { 
        if (err) return res.status(500).json({ error: err.message }); 
 
        if (results.length === 0) { 
            return res.status(401).json({ message: "Invalid credentials." }); 
        } 
 
        const user = results[0]; 
        const isMatch = await bcrypt.compare(password, user.password); 
 
        if (!isMatch) { 
            return res.status(401).json({ message: "Invalid credentials." }); 
        } 
 
        res.status(200).json({ message: "Login successful!", user: { id: user.id, name: 
user.name, email: user.email } }); 
    }); 
}); 
 
// الحصول على ملف تعريف المستخدم 
router.get("/user/:id", (req, res) => { 
    const sql = "SELECT id, name, email FROM users WHERE id = ?"; 
    db.query(sql, [req.params.id], (err, results) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        if (results.length === 0) return res.status(404).json({ message: "User not found." }); 
 
        res.status(200).json(results[0]); 
    }); 
});
// عملية لتحديث بيانات المستخدم 
router.put("/user/:id", async (req, res) => { 
    const { name, email, password } = req.body; 
    let sql = "UPDATE users SET name = ?, email = ? WHERE id = ?"; 
    let params = [name, email, req.params.id]; 
 
    if (password) { 
        const hashedPassword = await bcrypt.hash(password, 10); 
        sql = "UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?"; 
        params = [name, email, hashedPassword, req.params.id]; 
    } 
 
    db.query(sql, params, (err, result) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(200).json({ message: "Profile updated successfully!" }); 
    }); 
}); 
// عملية حذف لازالة حساب المستخدم
router.delete("/user/:id", (req, res) => { 
    const sql = "DELETE FROM users WHERE id = ?"; 
    db.query(sql, [req.params.id], (err, result) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(200).json({ message: "Account deleted successfully!" }); 
    }); 
}); 
module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../db');

// عملية قراءة لاسترجاع جميع المواضيع من قاعدة البيانات 
router.get("/topics", (req, res) => { 
    const sql = "SELECT * FROM topics"; 
    db.query(sql, (err, results) => { 
        if (err) {
console.error('Error fetching topics:', err);
return res.status(500).json({ error: 'Failed to fetch topics' });
}
          res.status(200).json(results); // Send the topics as JSON
        });
      });
      
      module.exports = router;
const express = require("express");
const router = express.Router();
const db = require("../db"); 

// عملية انشاء لاضافة موضوع في العلامة المرجعية
router.post("/bookmarks", (req, res) => {
    const { userId, topicId } = req.body;
    const sql = "INSERT INTO bookmarks (user_id, topic_id) VALUES (?, ?)";
    
    db.query(sql, [userId, topicId], (err, result) => {
        if (err) return res.status(500).json({ error: err.message });
        res.status(201).json({ message: "Bookmark added!" });
    });
});

// عملية قراءة لعرض المواضيع المحفوظة في العلامة المرجعية 
router.get("/bookmarks/:userId", (req, res) => {
    const sql = `
        SELECT * FROM topics 
        INNER JOIN bookmarks ON topics.id = bookmarks.topic_id 
        WHERE bookmarks.user_id = ?
    `;
    
    db.query(sql, [req.params.userId], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.status(200).json(results);
    });
});

// عملية حذف لازالة موضوع من العلامة المرجعية
router.delete("/bookmarks", (req, res) => {
    const { userId, topicId } = req.body;
    const sql = "DELETE FROM bookmarks WHERE user_id = ? AND topic_id = ?";
    
    db.query(sql, [userId, topicId], (err, result) => {
        if (err) return res.status(500).json({ error: err.message });
        res.status(200).json({ message: "Bookmark removed!" });
    });
});

module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../db');

// عملية انشاء لحفظ جميع نتائج المستخدمين الجدد 
router.post("/quizzes", (req, res) => { 
    const { userId, quizLevel, score } = req.body; 
    const sql = "INSERT INTO quiz_scores (user_id, quiz_level, score) VALUES (?, ?, ?)"; 
    db.query(sql, [userId, quizLevel, score], (err, result) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(201).json({ message: "Score saved!" }); 
    }); 
}); 
// عملية قراءة لعرض نتائج المستخدمين السابقة 
 
router.get("/quizzes/:userId", (req, res) => { 
    const sql = "SELECT * FROM quiz_scores WHERE user_id = ?"; 
    db.query(sql, [req.params.userId], (err, results) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(200).json(results); 
    }); 
}); 
// عملية لحذف نتائج المستخدمين
router.delete("/quizzes/:userId", (req, res) => { 
    const sql = "DELETE FROM quiz_scores WHERE user_id = ?"; 
    db.query(sql, [req.params.userId], (err, result) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(200).json({ message: "Scores reset!" }); 
    }); 
});
module.exports = router;
const express = require('express');
const router = express.Router();
const db = require('../db');
// عملية قراءة للبحث عن موضوع
router.get("/topics/search/:keyword", (req, res) => { 
    const sql = "SELECT * FROM topics WHERE title LIKE ?"; 
    db.query(sql, [`%${req.params.keyword}%`], (err, results) => { 
        if (err) return res.status(500).json({ error: err.message }); 
        res.status(200).json(results); 
    }); 
}); 
module.exports = router;

// JAVASCRIPT FETCH 

// السماح للمستخدم بتسجيل حساب جديد
const registerUser = async (userData) => {
    try {
        const response = await fetch('/api/auth/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData),
        });

        if (!response.ok) {
            const error = await response.json();
            console.error(error.message); // Error message from backend
            return { error: error.message };
        }

        const result = await response.json();
        console.log(result.message); // Success
        return result;
    } catch (error) {
        console.error('Error:', error);
        return { error: error.message }; // Return a more structured error
    }
};

// السماح للمستخدم بتسجيل الدخول
const loginUser = async (credentials) => {
    try {
        const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(credentials),
        });

        if (!response.ok) {
            const error = await response.json();
            console.error(error.message); // Invalid credentials error
            return { error: error.message };
        }

        const result = await response.json();
        console.log(result.message); // Success
        return result.user; // Return user data
    } catch (error) {
        console.error('Error:', error);
        return { error: error.message }; // Return error message if fetch fails
    }
};

// السماح للمستخدم بعرض الملف الشخصي
const getUserProfile = async (userId) => {
    try {
        const response = await fetch(`/api/auth/user/${userId}`, { method: 'GET' });

        if (!response.ok) {
            const error = await response.json();
            console.error(error.message); // Error, user not found
            return { error: error.message };
        }

        const result = await response.json();
        console.log('User profile:', result); // Success
        return result;
    } catch (error) {
        console.error('Error:', error);
        return { error: error.message }; // Return error message if fetch fails
    }
};

// تحديث حساب المستخدم
const updateUserProfile = async (userId, updatedData) => {
    try {
        const response = await fetch(`/api/auth/user/${userId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updatedData),
        });

        if (!response.ok) {
            const error = await response.json();
            console.error(error.message); // Error updating profile
            return { error: error.message };
        }

        const result = await response.json();
        console.log(result.message); // Success
        return result;
    } catch (error) {
        console.error('Error:', error);
        return { error: error.message }; // Return error message if fetch fails
    }
};

// حذف حساب المستخدم
const deleteUserAccount = async (userId) => {
    try {
        const response = await fetch(`/api/auth/user/${userId}`, { method: 'DELETE' });

        if (!response.ok) {
            const error = await response.json();
            console.error(error.message); // Error deleting account
            return { error: error.message };
        }

        const result = await response.json();
        console.log(result.message); // Success
        return result;
    } catch (error) {
        console.error('Error:', error);
        return { error: error.message }; // Return error message if fetch fails
    }
};
// عرض جميع المواضيع المتاحة في قاعدة البيانات
const getAllTopics = async () => {
    try {
        const response = await fetch('/api/lists', {
            method: 'GET',
        });

        if (response.ok) {
            const topics = await response.json();
            console.log('Fetched topics:', topics); 
            return topics;
        } else {
            const errorData = await response.json();
            console.error('Error fetching topics:', errorData.error || errorData.message);
            return 'Error fetching topics: ' + (errorData.error || errorData.message);
        }
    } catch (error) {
        console.error('Error:', error);
        return 'Error fetching topics: Network or other issue';
    }
};
// السماح للمستخدم بإضافة علامة مرجعية
const addBookmark = async (userId, topicId) => {
    try {
        const response = await fetch('/api/bookmarks', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, topicId }),
        });

        const result = await response.json();

        if (response.ok) {
            console.log(result.message); // Success
            return result;
        } else {
            console.error(result.message); // Error message from backend
            return null;
        }
    } catch (error) {
        console.error('Error:', error);
    }
};

// السماح للمستخدم بإسترجاع جميع العلامات مرجعية
const getBookmarks = async (userId) => {
    try {
        const response = await fetch(`/api/bookmarks/${userId}`, {
            method: 'GET',
        });

        const result = await response.json();

        if (response.ok) {
            console.log('Bookmarked topics:', result); // Success, log the bookmarked topics
            return result;
        } else {
            console.error(result.message); // Error, no bookmarks found
            return null;
        }
    } catch (error) {
        console.error('Error:', error);
    }
};

// حذف موضوع من العلامة المرجعية
const removeBookmark = async (userId, topicId) => {
    try {
        const response = await fetch('/api/bookmarks', {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, topicId }),
        });

        const result = await response.json();

        if (response.ok) {
            console.log(result.message); // Success
            return result;
        } else {
            console.error(result.message); // Error message from backend
            return null;
        }
    } catch (error) {
        console.error('Error:', error);
    }
};
// حفظ نتائج الاختبار للمستخدم
const saveQuizScore = async (userId, quizLevel, score) => {
    try {
        const response = await fetch('/api/quizzes', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, quizLevel, score }),
        });

        const result = await response.json();

        if (response.ok) {
            console.log(result.message);
            return result;
        } else {
            console.error(result.message);
            return `Error saving score: ${result.message}`;
        }
    } catch (error) {
        console.error('Error:', error);
        return `Error saving score: ${error.message}`;
    }
};

// عرض نتائج الاختبار للمستخدم
const getQuizScores = async (userId) => {
    try {
        const response = await fetch(`/api/quizzes/${userId}`, {
            method: 'GET',
        });

        if (response.ok) {
            const results = await response.json();
            console.log('Fetched quiz scores:', results);
            return results;
        } else {
            const errorData = await response.json();
            console.error('Error fetching quiz scores:', errorData.error || errorData.message);
            return `Error fetching quiz scores: ${errorData.error || errorData.message}`;
        }
    } catch (error) {
        console.error('Error:', error);
        return `Error fetching quiz scores: ${error.message}`;
    }
};

// حذف نتائج الاختبار للمستخدم
const deleteQuizScores = async (userId) => {
    try {
        const response = await fetch(`/api/quizzes/${userId}`, {
            method: 'DELETE',
        });

        const result = await response.json();

        if (response.ok) {
            console.log(result.message);
            return result;
        } else {
            console.error(result.message);
            return `Error deleting scores: ${result.message}`;
        }
    } catch (error) {
        console.error('Error:', error);
        return `Error deleting scores: ${error.message}`;
    }
};
// البحث عن موضوع باستخدام كلمة مفتاحية
const searchTopics = async (keyword) => {
    try {
        const response = await fetch(`/api/topics/search/${keyword}`, {
            method: 'GET',
        });

        if (response.ok) {
            const topics = await response.json();
            console.log('Found topics:', topics);
            return topics;
        } else {
            const errorData = await response.json();
            console.error('Error fetching topics:', errorData.error || errorData.message);
            return `Error fetching topics: ${errorData.error || errorData.message}`;
        }
    } catch (error) {
        console.error('Error:', error);
        return `Error fetching topics: ${error.message}`;
    }
};
